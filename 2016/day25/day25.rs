#!/usr/bin/env rust-script
//! ```cargo
//! [package]
//! edition = "2021"
//!
//! [dependencies]
//! regex = "1"
//! ```

// Decompiling my puzzle input, I find that the code is equivalent to the
// following:
// d = a + 4 * 633
// loop {
//     a = d;
//     loop {
//         b = a % 2;
//         a /= 2;
//         print!("{b}");
//         if a == 0 {
//             break;
//         }
//     }
// }
// In other words, the code computes a constant a + 4 * 633, and then repeatedly
// broadcasts its bits, lowest bit first.
// So, we want a to end up being a number of the form 10101010... in binary.
// I'm assuming that the difference in the inputs is the constants 4 and 633.

use regex::Regex;

fn parse_input(input: &str) -> (u32, u32) {
    let re = Regex::new(
        r"cpy a d
cpy (\d+) c
cpy (\d+) b
inc d
dec b
jnz b -2
dec c
jnz c -5
cpy d a
jnz 0 0
cpy a b
cpy 0 a
cpy 2 c
jnz b 2
jnz 1 6
dec b
dec c
jnz c -4
inc a
jnz 1 -7
cpy 2 b
jnz c 2
jnz 1 4
dec b
dec c
jnz 1 -4
jnz 0 0
out b
jnz a -19
jnz 1 -21",
    )
    .unwrap();

    let captures = re.captures(input).unwrap();
    (captures[1].parse().unwrap(), captures[2].parse().unwrap())
}

fn star1(input: (u32, u32)) -> u32 {
    // Numbers of the form 101010... in binary turn out to be generated by the
    // formula 2/3 (4^n - 1).

    let initial_constant = input.0 * input.1;
    if initial_constant == 0 {
        return 0b10;
    }

    let leading_zeroes = initial_constant.leading_zeros();
    let log4 = (u32::BITS - leading_zeroes) / 2;

    let target = {
        let candidate = ((1 << (log4 * 2)) - 1) / 3 * 2;
        if candidate < initial_constant {
            // Use the next one up
            ((1 << ((log4 + 1) * 2)) - 1) / 3 * 2
        } else {
            candidate
        }
    };

    target - initial_constant
}

fn main() {
    let args: Vec<_> = std::env::args().collect();
    let filename = args.get(1).map(|s| &s[..]).unwrap_or("input.txt");
    let input = std::fs::read_to_string(filename).unwrap();

    let input = parse_input(&input);

    println!("{}", star1(input));
}
